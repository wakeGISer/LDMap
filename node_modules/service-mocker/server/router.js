"use strict";
var pathToRegExp = require("path-to-regexp");
var _1 = require("../utils/");
var request_1 = require("./request");
var response_1 = require("./response");
var routerLog = _1.debug.scope('router');
// bacic HTTP request methods in fetch standard, see
// https://fetch.spec.whatwg.org/#concept-method
var methods = [
    'get',
    'post',
    'put',
    'head',
    'delete',
    'options',
];
var MockerRouter = (function () {
    function MockerRouter(baseURL) {
        if (baseURL === void 0) { baseURL = '/'; }
        this._rules = [];
        MockerRouter.routers.push(this);
        // resolve url based on current origin for relative path
        // `location.origin` is not supported in IE
        var url = new URL(baseURL, location.href);
        this._origin = url.origin;
        this._basePath = url.pathname.replace(/\/$/, ''); // remove trailing slash
        this.baseURL = this._origin + this._basePath;
    }
    /**
     * Create a new router with the given path as scope.
     */
    MockerRouter.prototype.scope = function (path) {
        // in case of falsy values
        if (!path) {
            path = '/';
        }
        if (path[0] !== '/') {
            throw new TypeError("the scope of router should start with \"/\", got " + path);
        }
        return new MockerRouter(this.baseURL + path);
    };
    /* istanbul ignore next */
    MockerRouter.prototype.base = function (path) {
        routerLog.warn('`router.base()` is deprecated, use `router.scope()` instead.');
        return this.scope(path);
    };
    /**
     * Create a scoped router with the given path as
     * route path for every routing method.
     */
    MockerRouter.prototype.route = function (path) {
        return new SubRouter(this, path);
    };
    /**
     * Register a new routing to current router
     *
     * @param method HTTP method
     * @param path Routing path rule
     * @param callback Routing callback handler
     */
    MockerRouter.prototype.register = function (method, path, callback) {
        method = method.toUpperCase();
        var regex = pathToRegExp(path);
        var cb;
        if (typeof callback === 'function') {
            cb = callback;
        }
        else {
            // shorthand method
            cb = function (_request, response) {
                response.send(callback);
            };
        }
        this._rules.push({
            method: method,
            path: path,
            regex: regex,
            callback: cb,
            keys: regex.keys,
            baseURL: this.baseURL,
            isAll: method === 'ALL',
        });
        return this;
    };
    /**
     * Match the proper routing, return `true` if rule matched
     *
     * @param event Fetch event
     */
    MockerRouter.prototype.match = function (event) {
        var request = event.request;
        // `request.url` maybe relative in legacy mode
        var url = new URL(request.url, location.href);
        if (url.origin !== this._origin) {
            return false;
        }
        // strip router's base path
        var re = new RegExp("^" + this._basePath);
        var path = url.pathname.replace(re, '');
        for (var _i = 0, _a = this._rules; _i < _a.length; _i++) {
            var rule = _a[_i];
            var method = rule.method, regex = rule.regex, callback = rule.callback;
            if (regex.test(path) && (request.method === method || rule.isAll)) {
                var request_2 = new request_1.MockerRequest(event, rule);
                var response = new response_1.MockerResponse(event);
                callback.call(event, request_2, response);
                return true;
            }
        }
        return false;
    };
    return MockerRouter;
}());
// save all routers for lazy evaluations
MockerRouter.routers = [];
exports.MockerRouter = MockerRouter;
var SubRouter = (function () {
    function SubRouter(_router, _path) {
        this._router = _router;
        this._path = _path;
    }
    /**
     * Register a new scoped routing
     * @param method HTTP method
     * @param callback Routing callback handler
     */
    SubRouter.prototype.register = function (method, callback) {
        // convert to 'any' type to access private method
        this._router.register(method, this._path, callback);
        return this;
    };
    return SubRouter;
}());
exports.SubRouter = SubRouter;
var allMethods = [
    'all'
].concat(methods);
// assign all methods to router
allMethods.forEach(function (method) {
    MockerRouter.prototype[method] = function (path, callback) {
        return this.register(method, path, callback);
    };
});
allMethods.forEach(function (method) {
    SubRouter.prototype[method] = function (callback) {
        return this.register(method, callback);
    };
});
//# sourceMappingURL=router.js.map