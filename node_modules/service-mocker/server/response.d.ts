/// <reference types="whatwg-fetch" />
/// <reference types="service_worker_api" />
import { MockerRequest } from './request';
export interface IMockerResponse {
    readonly headers: Headers;
    status(code: number): this;
    type(type: string): this;
    json(body?: any): void;
    send(body?: any): void;
    sendStatus(code: number): void;
    end(): void;
    forward(input: RequestInfo, init?: RequestInit): void;
}
export declare class MockerResponse implements IMockerResponse {
    private _event;
    readonly headers: Headers;
    private _body;
    private _statusCode;
    private _deferred;
    constructor(_event: FetchEvent);
    /**
     * Sets the HTTP status for the response.
     *
     * @chainable
     * @param code Status code
     */
    status(code: number): this;
    /**
     * Sets the Content-Type HTTP header to the MIME type.
     * If the given MIME doesn't contain '/' character,
     * use `mime.lookup(type)` to obtain MIME type.
     *
     * @chainable
     * @param type MIME type
     */
    type(type: string): this;
    /**
     * Send a JSON response.
     *
     * @param body Any JSON compatible type, including object, array, string, Boolean, or number.
     */
    json(body?: any): void;
    /**
     * Sends the HTTP response.
     *
     * @param body Response body, one of Blob, ArrayBuffer, Object, or any primitive types
     */
    send(body?: any): void;
    /**
     * Set the response HTTP status code to statusCode and
     * send its status text representation as the response body.
     *
     * Equivalent to `res.status(code).send(statusText)`
     *
     * @param code Status code
     */
    sendStatus(code: number): void;
    /**
     * End the response processing and pass the response to `fetchEvent.respondWith()`.
     * Simply call this method will end the response WITHOUT any data,
     * if you want to respond with data, use `res.send()` and `res.json()`.
     */
    end(): void;
    /**
     * Forward the request to another destination.
     * The forwarded request will NOT be captured by service worker.
     *
     * @param input Destination URL or a Request object or MockerRequest
     * @param init Fetch request init
     */
    forward(input: RequestInfo, init?: RequestInit): Promise<void>;
    forward(input: MockerRequest, init?: RequestInit): Promise<void>;
}
