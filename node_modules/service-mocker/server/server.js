"use strict";
var _this = this;
var tslib_1 = require("tslib");
var router_1 = require("./router");
var _1 = require("../constants/");
var MockerServer = (function () {
    function MockerServer(baseURL) {
        this.isLegacy = self === self.window;
        this.router = new router_1.MockerRouter(baseURL);
    }
    return MockerServer;
}());
exports.MockerServer = MockerServer;
// Event listeners MUST be added on the initial evaluation of worker scripts.
/* istanbul ignore next: unable to report coverage from sw context */
self.addEventListener('message', function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var data, ports, port, _a;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                data = event.data, ports = event.ports;
                if (!data || !ports.length) {
                    return [2 /*return*/];
                }
                port = ports[0];
                _a = data.action;
                switch (_a) {
                    case _1.ACTION.PING: return [3 /*break*/, 1];
                    case _1.ACTION.REQUEST_CLAIM: return [3 /*break*/, 2];
                }
                return [3 /*break*/, 4];
            case 1: return [2 /*return*/, port.postMessage({
                    action: _1.ACTION.PONG,
                })];
            case 2: return [4 /*yield*/, self.clients.claim()];
            case 3:
                _b.sent();
                return [2 /*return*/, port.postMessage({
                        action: _1.ACTION.ESTABLISHED,
                    })];
            case 4: return [2 /*return*/];
        }
    });
}); });
self.addEventListener('fetch', function (event) {
    router_1.MockerRouter.routers.some(function (router) {
        return router.match(event);
    });
});
// IE will somehow fires `activate` event on form elements
/* istanbul ignore if: unable to report coverage from sw context */
if (self !== self.window) {
    self.addEventListener('install', function (event) {
        event.waitUntil(self.skipWaiting());
    });
    self.addEventListener('activate', function (event) {
        event.waitUntil(self.clients.claim());
    });
}
//# sourceMappingURL=server.js.map