"use strict";
var tslib_1 = require("tslib");
var qs = require("qs");
var _1 = require("../utils/");
var requestLog = _1.debug.scope('request');
// convert native `Request` to extendable
// export or you'll get an error of 'using private'
/* istanbul ignore next: polyfill is legacy browsers only */
exports.ExtandableRequest = fetch.polyfill ? Request : _1.extensify(Request);
var MockerRequest = (function (_super) {
    tslib_1.__extends(MockerRequest, _super);
    function MockerRequest(event, route) {
        var _this = this;
        var request = event.request;
        var regex = route.regex, keys = route.keys, baseURL = route.baseURL;
        // avoid polluting original request
        _this = _super.call(this, request.clone()) || this;
        var base = new URL(baseURL);
        var requestURL = new URL(request.url, location.href);
        var path = base.pathname === '/' ?
            requestURL.pathname :
            requestURL.pathname.replace(base.pathname, '');
        var matches = regex.exec(path);
        var params = {};
        // skip full matched string at [0]
        var max = matches.length;
        for (var i = 1; i < max; i++) {
            var name_1 = keys[i - 1].name;
            params[name_1] = decodeParam(matches[i]);
        }
        _this._event = event;
        _this._route = route;
        _this.path = path;
        _this.params = params;
        _this.baseURL = baseURL;
        _this.query = qs.parse(requestURL.search.slice(1)); // remove leading '?'
        // overwrite relative URL from fetch polyfill
        /* istanbul ignore if: legacy browsers only */
        if (_this.url !== requestURL.href) {
            Object.defineProperty(_this, 'url', {
                value: requestURL.href,
                writable: false,
                enumerable: true,
                configurable: true,
            });
        }
        return _this;
    }
    MockerRequest.prototype.clone = function () {
        return new MockerRequest(this._event, this._route);
    };
    return MockerRequest;
}(exports.ExtandableRequest));
exports.MockerRequest = MockerRequest;
function decodeParam(value) {
    try {
        return decodeURIComponent(value);
    }
    catch (err) {
        requestLog.error("decode param: " + value + " failed", err);
        return null;
    }
}
//# sourceMappingURL=request.js.map