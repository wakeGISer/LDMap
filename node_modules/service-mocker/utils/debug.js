"use strict";
var isIE = /Trident|Edge/.test(navigator.userAgent);
var defaultColor = 'dodgerblue';
var colorPresets = {
    log: defaultColor,
    info: defaultColor,
    warn: 'goldenrod',
    error: 'crimson',
};
var PrefixedConsole = (function () {
    function PrefixedConsole(_namespace, _color) {
        if (_namespace === void 0) { _namespace = 'mocker'; }
        if (_color === void 0) { _color = colorPresets.log; }
        this._namespace = _namespace;
        this._color = _color;
    }
    PrefixedConsole.prototype.color = function (c) {
        return new PrefixedConsole(this._namespace, c);
    };
    PrefixedConsole.prototype.scope = function (ns) {
        return new PrefixedConsole(this._namespace + ":" + ns, this._color);
    };
    return PrefixedConsole;
}());
exports.PrefixedConsole = PrefixedConsole;
exports.debug = new PrefixedConsole();
/* istanbul ignore else */
// inherit console methods
if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(PrefixedConsole.prototype, console);
}
else {
    var desc_1 = {};
    Object.getOwnPropertyNames(PrefixedConsole.prototype).forEach(function (prop) {
        desc_1[prop] = Object.getOwnPropertyDescriptor(PrefixedConsole.prototype, prop);
    });
    PrefixedConsole.prototype = Object.create(console, desc_1);
}
[
    'log',
    'info',
    'warn',
    'error',
].forEach(function (method) {
    PrefixedConsole.prototype[method] = function logger() {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        var _a = this, _namespace = _a._namespace, _color = _a._color;
        /* istanbul ignore if */
        if (isIE) {
            return console[method].apply(console, ["[" + _namespace + "]"].concat(messages));
        }
        var head = "%c[" + _namespace + "]%c";
        if (/%c/.test(messages[0])) {
            head = head + " " + messages.shift();
        }
        var color = _color === defaultColor ? colorPresets[method] : _color;
        console[method].apply(console, [head, "color: " + color, 'color: #000'].concat(messages));
    };
});
//# sourceMappingURL=debug.js.map