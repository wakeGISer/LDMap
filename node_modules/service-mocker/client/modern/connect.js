"use strict";
var tslib_1 = require("tslib");
var _1 = require("../../utils/");
var _2 = require("../../constants/");
var get_newest_reg_1 = require("./get-newest-reg");
function connect() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var serviceWorker, reg, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    serviceWorker = navigator.serviceWorker;
                    if (!serviceWorker.controller) return [3 /*break*/, 2];
                    return [4 /*yield*/, get_newest_reg_1.getNewestReg()];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, serviceWorker.ready];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    reg = _a;
                    return [2 /*return*/, handshake(reg)];
            }
        });
    });
}
exports.connect = connect;
function handshake(registration) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var controller;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    controller = registration.active;
                    /* istanbul ignore if */
                    if (!controller) {
                        throw new Error('no active service worker registration is found');
                    }
                    if (!!navigator.serviceWorker.controller) return [3 /*break*/, 2];
                    return [4 /*yield*/, _1.sendMessageRequest(controller, {
                            action: _2.ACTION.REQUEST_CLAIM,
                        })];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [4 /*yield*/, _1.sendMessageRequest(controller, {
                        action: _2.ACTION.PING,
                    })];
                case 3:
                    _a.sent();
                    _1.debug.scope('modern').info('connection established');
                    return [2 /*return*/, registration];
            }
        });
    });
}
//# sourceMappingURL=connect.js.map