"use strict";
var tslib_1 = require("tslib");
var _1 = require("../../utils/");
var register_1 = require("./register");
var connect_1 = require("./connect");
var get_newest_reg_1 = require("./get-newest-reg");
var ModernClient = (function () {
    function ModernClient(scriptURL) {
        var _this = this;
        this.isLegacy = false;
        /* istanbul ignore next */
        this.ready = this._init(scriptURL)
            .then(function (registration) {
            _this.controller = registration.active;
            return registration;
        })
            .catch(function (error) {
            _1.debug.error('mocker initialization failed: ', error);
        });
    }
    ModernClient.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, get_newest_reg_1.getNewestReg()];
            });
        });
    };
    ModernClient.prototype.getRegistration = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.ready];
            });
        });
    };
    /* istanbul ignore next: don't unregister sw in tests */
    ModernClient.prototype.unregister = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var registration, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRegistration()];
                    case 1:
                        registration = _a.sent();
                        return [4 /*yield*/, registration.unregister()];
                    case 2:
                        result = _a.sent();
                        if (!result) {
                            // tslint:disable-next-line max-line-length
                            _1.debug.warn('this service worker has already been unregistered, you may need to close all relative tabs to remove it');
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    ModernClient.prototype._init = function (scriptURL) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var registration;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, register_1.register(scriptURL, {
                            scope: location.pathname,
                        })];
                    case 1:
                        registration = _a.sent();
                        this._autoSyncClient();
                        return [2 /*return*/, registration];
                }
            });
        });
    };
    ModernClient.prototype._autoSyncClient = function () {
        var _this = this;
        var serviceWorker = navigator.serviceWorker;
        var updateLog = _1.debug.scope('update');
        /* istanbul ignore next: won't occur in tests */
        serviceWorker.addEventListener('controllerchange', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var registration, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, connect_1.connect()];
                    case 1:
                        registration = _a.sent();
                        this.controller = registration.active;
                        updateLog.color('crimson')
                            .warn('mocker updated, reload your requests to take effect');
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        updateLog.error('connecting to new service worker failed', error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    return ModernClient;
}());
exports.ModernClient = ModernClient;
//# sourceMappingURL=client.js.map