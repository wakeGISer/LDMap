"use strict";
var tslib_1 = require("tslib");
var _1 = require("../../utils/");
var _2 = require("../../constants/");
var patch_xhr_1 = require("./patch-xhr");
var patch_fetch_1 = require("./patch-fetch");
var clientLog = _1.debug.scope('legacy');
var registrations = {};
var LegacyClient = (function () {
    function LegacyClient(scriptURL) {
        var _this = this;
        this.isLegacy = true;
        this.controller = null;
        this._registration = null;
        patch_xhr_1.patchXHR();
        patch_fetch_1.patchFetch();
        var promise;
        // avoid duplications
        if (registrations[scriptURL]) {
            promise = registrations[scriptURL];
        }
        else {
            registrations[scriptURL] =
                promise = new Promise(function (resolve, reject) {
                    var script = document.createElement('script');
                    script.src = scriptURL;
                    script.onload = resolve;
                    script.onerror = reject;
                    document.body.appendChild(script);
                });
        }
        /* istanbul ignore next */
        this.ready = promise.then(function () {
            return _1.sendMessageRequest(window, {
                action: _2.ACTION.PING,
            });
        })
            .then(function () {
            clientLog.info('connection established');
            return _this._registration;
        })
            .catch(function (error) {
            // `ready` should never be rejected
            clientLog.error('bootstrap failed', error);
        });
    }
    LegacyClient.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve(this._registration)];
            });
        });
    };
    LegacyClient.prototype.getRegistration = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve(this._registration)];
            });
        });
    };
    /* istanbul ignore next */
    LegacyClient.prototype.unregister = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                _1.debug.scope('legacy').warn('mocker in legacy mode can\'t be unregistered');
                return [2 /*return*/, false];
            });
        });
    };
    return LegacyClient;
}());
exports.LegacyClient = LegacyClient;
//# sourceMappingURL=client.js.map