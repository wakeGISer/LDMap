"use strict";
var tslib_1 = require("tslib");
var _1 = require("../../utils/");
var create_event_1 = require("./create-event");
var fetchEvents = [];
var addEventListener = self.addEventListener.bind(self);
// handle fetch events ourselves
self.addEventListener = function (type, listener, useCapture) {
    if (type === 'fetch') {
        fetchEvents.push(listener);
    }
    else {
        addEventListener(type, listener, useCapture);
    }
};
/**
 * Dispatch fetch event on GlobalScope in legacy mode.
 * Resolved with `null` if `event.respondWith` isn't called.
 */
function dispatchFetchEvent(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var fetchEvt, deferred;
        return tslib_1.__generator(this, function (_a) {
            fetchEvt = create_event_1.createEvent('fetch');
            deferred = new _1.Defer();
            fetchEvt.request = request;
            fetchEvt.respondWith = function (response) {
                if (deferred.done) {
                    // tslint:disable-next-line max-line-length
                    throw new Error("Failed to execute 'respondWith' on 'FetchEvent': The fetch event has already been responded to.");
                }
                deferred.resolve(response);
            };
            fetchEvents.forEach(function (listener) {
                listener(fetchEvt);
            });
            // `event.respondWith` wasn't called
            if (!deferred.done) {
                deferred.resolve(null);
            }
            return [2 /*return*/, deferred.promise];
        });
    });
}
exports.dispatchFetchEvent = dispatchFetchEvent;
//# sourceMappingURL=dispatch-fetch-event.js.map